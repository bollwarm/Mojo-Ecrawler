<h1 class="graf graf--h3 graf--leading graf--title" id="d21c" name="d21c">Why aren’t we using SSH for everything?</h1><p class="graf graf--p graf-after--h3" id="753f" name="753f"><em class="markup--em markup--p-em">(</em>Previous title:<em class="markup--em markup--p-em"> SSH, how does it even?)</em></p><p class="graf graf--p graf-after--p" id="025c" name="025c">A few weeks ago, I wrote <a class="markup--anchor markup--p-anchor" data-href="https://github.com/shazow/ssh-chat" href="https://github.com/shazow/ssh-chat" rel="nofollow noopener" target="_blank">ssh-chat</a>.</p><figure class="graf graf--figure graf--iframe graf-after--p" id="5b73" name="5b73"><div class="aspectRatioPlaceholder is-locked"><div class="aspectRatioPlaceholder-fill" style="padding-bottom: 35.699999999999996%;"></div><div class="iframeContainer"><iframe allowfullscreen data-media-id="512c7541af6d8de5eb9637c8aebe92dd" frameborder="0" height="250" src="/media/512c7541af6d8de5eb9637c8aebe92dd?postId=9e43586e4ffc" width="700"></iframe></div></div></figure><p class="graf graf--p graf-after--figure" id="b079" name="b079">The idea is simple: You open your terminal and type,</p><pre class="graf graf--pre graf-after--p" id="7bae" name="7bae">$ ssh chat.shazow.net</pre><p class="graf graf--p graf-after--pre" id="6b1b" name="6b1b">Unlike many others, you might stop yourself before typing “ls” and notice — that’s no shell, it’s a chat room!</p><p class="graf graf--p graf-after--p" id="f172" name="f172">While the little details sink in, it dawns on you that there is something extra-special going on in here.</p><h3 class="graf graf--h3 graf-after--p" id="116f" name="116f">SSH knows your username</h3><p class="graf graf--p graf-after--h3" id="2d7c" name="2d7c">When you ssh into a server, your client shares several environment variables as inputs to the server, among them is the $USER variable. You can overwrite this, of course, by specifying the user you’re connecting as such:</p><pre class="graf graf--pre graf-after--p" id="48fc" name="48fc">$ ssh neo@chat.shazow.net</pre><p class="graf graf--p graf-after--pre" id="7230" name="7230">Well look at that, you’re the one. So special. What else can we mess with? By default, the server gets your $TERM variable too.</p><pre class="graf graf--pre graf-after--p" id="70e1" name="70e1">$ TERM=inator ssh chat.shazow.net</pre><p class="graf graf--p graf-after--pre" id="26ca" name="26ca">If ssh-chat was smart, it would recognize that your custom terminal might not support colours and skip sending those extra formatting characters.</p><p class="graf graf--p graf-after--p" id="d313" name="d313">You can even push your own environment variables with a <em class="markup--em markup--p-em">SendEnv</em> option flag, but we won’t get into that.</p><h3 class="graf graf--h3 graf-after--p" id="339c" name="339c">SSH validates against your key pair</h3><p class="graf graf--p graf-after--h3" id="2580" name="2580">There are several supported authentication methods in SSH: <em class="markup--em markup--p-em">none</em>, <em class="markup--em markup--p-em">password, keyboard-interactive, </em>and <em class="markup--em markup--p-em">publickey</em>. They each have interesting properties, but the last one is especially handy.</p><p class="graf graf--p graf-after--p" id="ebf2" name="ebf2">When your SSH client connects to a server, it negotiates an acceptable authentication method that both support (typically the reverse order of the above). If you’ve specified the identity flag or have some keys lying around in your <em class="markup--em markup--p-em">~/.ssh/ </em>directory, your client will offer up some public keys to authenticate against. If the server recognizes one of those keys, such as if they’re listed in <em class="markup--em markup--p-em">authorized_keys</em>, then a secure handshake will begin verifying that you hold the private key to that public key but without revealing what the private key is. In the process, the client and server securely agree on a temporary symmetric <em class="markup--em markup--p-em">session key</em> to encrypt the communication with.</p><p class="graf graf--p graf-after--p" id="52c2" name="52c2">What does this mean? It means that SSH has authentication built into the protocol. <strong class="markup--strong markup--p-strong">When you join ssh-chat, not only do I know who you <em class="markup--em markup--p-em">claim</em> to be, but I can also permanently and securely attach an identity to your connection without any user intervention on your part.</strong> No signup forms, no clicking on links in your email, no fancy mobile apps.</p><p class="graf graf--p graf-after--p" id="b227" name="b227">A future version of ssh-chat will allow you to create a permanent account which is validated against your key pair, and these permanent accounts might have all kinds of special features like username ownership, always-online presence, and push notifications over Pushover or email.</p><h3 class="graf graf--h3 graf-after--p" id="0dff" name="0dff">SSH connections are encrypted</h3><p class="graf graf--p graf-after--h3" id="896d" name="896d">The server uses the same kind of key pair as a client would. When you connect to a new SSH host, you get a message that presents a “key fingerprint” for you to validate. The fingerprint is the hex of a hash of the server’s public key.</p><figure class="graf graf--figure graf-after--p" id="740d" name="740d"><div class="aspectRatioPlaceholder is-locked" style="max-width: 700px; max-height: 88px;"><div class="aspectRatioPlaceholder-fill" style="padding-bottom: 12.6%;"></div><div class="progressiveMedia js-progressiveMedia graf-image" data-action="zoom" data-action-value="1*riKs6PVsoBuW0yO7a5Ojxw.png" data-height="101" data-image-id="1*riKs6PVsoBuW0yO7a5Ojxw.png" data-width="800"><img class="progressiveMedia-thumbnail js-progressiveMedia-thumbnail" crossorigin="anonymous" src="https://cdn-images-1.medium.com/freeze/max/60/1*riKs6PVsoBuW0yO7a5Ojxw.png?q=20"><canvas class="progressiveMedia-canvas js-progressiveMedia-canvas"></canvas><img class="progressiveMedia-image js-progressiveMedia-image" data-src="https://cdn-images-1.medium.com/max/1600/1*riKs6PVsoBuW0yO7a5Ojxw.png"><noscript class="js-progressiveMedia-inner"><img class="progressiveMedia-noscript js-progressiveMedia-inner" src="https://cdn-images-1.medium.com/max/1600/1*riKs6PVsoBuW0yO7a5Ojxw.png"></noscript></div></div></figure><p class="graf graf--p graf-after--figure" id="49f9" name="49f9">What does it mean if you try to connect to chat.shazow.net and you see a <em class="markup--em markup--p-em">different</em> fingerprint hash? You’re being <a class="markup--anchor markup--p-anchor" data-href="https://en.wikipedia.org/wiki/Man-in-the-middle_attack" href="https://en.wikipedia.org/wiki/Man-in-the-middle_attack" rel="nofollow noopener" target="_blank">man-in-the-middle</a>’d.</p><p class="graf graf--p graf-after--p" id="dd0d" name="dd0d">Your local neighbourhood clandestine security agency could make an SSH server that just acts as a proxy in front of another SSH server you frequent (using something like <a class="markup--anchor markup--p-anchor" data-href="http://linux.die.net/man/8/sshmitm" href="http://linux.die.net/man/8/sshmitm" rel="nofollow noopener" target="_blank">sshmitm</a>) and log everything that is going on while passing it through. Fortunately, as long as the proxy doesn’t have the original server’s private key, then the key fingerprint will be different.</p><p class="graf graf--p graf-after--p" id="602a" name="602a">Once you accept a fingerprint, it will be added to your <em class="markup--em markup--p-em">~/.ssh/known_hosts </em>where it will be <em class="markup--em markup--p-em">pinned</em> to that host. This means if the key for the host ever changes, you’ll be greeted with this appropriately-scary message:</p><figure class="graf graf--figure graf-after--p" id="05c7" name="05c7"><div class="aspectRatioPlaceholder is-locked" style="max-width: 700px; max-height: 274px;"><div class="aspectRatioPlaceholder-fill" style="padding-bottom: 39.1%;"></div><div class="progressiveMedia js-progressiveMedia graf-image" data-action="zoom" data-action-value="1*mva2_6fu-3QfdTDfueclEg.png" data-height="313" data-image-id="1*mva2_6fu-3QfdTDfueclEg.png" data-width="800"><img class="progressiveMedia-thumbnail js-progressiveMedia-thumbnail" crossorigin="anonymous" src="https://cdn-images-1.medium.com/freeze/max/60/1*mva2_6fu-3QfdTDfueclEg.png?q=20"><canvas class="progressiveMedia-canvas js-progressiveMedia-canvas"></canvas><img class="progressiveMedia-image js-progressiveMedia-image" data-src="https://cdn-images-1.medium.com/max/1600/1*mva2_6fu-3QfdTDfueclEg.png"><noscript class="js-progressiveMedia-inner"><img class="progressiveMedia-noscript js-progressiveMedia-inner" src="https://cdn-images-1.medium.com/max/1600/1*mva2_6fu-3QfdTDfueclEg.png"></noscript></div></div></figure><p class="graf graf--p graf-after--figure" id="55cb" name="55cb">A host you’ve connected to previously is advertising a different public key than it did before. If you can’t account for this change (maybe you launched a new VPS on the same IP address as before and it generated a fresh SSH key pair?) then it’s worth being worried. Try connecting to this host from another network, see if the problem persists — if not, then someone is hijacking your local connection rather than the server’s connection.</p><h3 class="graf graf--h3 graf-after--p" id="6cb9" name="6cb9">SSH supports multiplexing</h3><p class="graf graf--p graf-after--h3" id="5bf6" name="5bf6">When your client connects to a server, it opens a <em class="markup--em markup--p-em">channel</em> where it requests a specific feature. There are many fun things your client can request like <em class="markup--em markup--p-em">pty-req</em> (a pseudo-terminal), <em class="markup--em markup--p-em">exec</em> (run command), or even <em class="markup--em markup--p-em">tcpip-forward </em>(port forwarding). <a class="markup--anchor markup--p-anchor" data-href="http://www.ietf.org/rfc/rfc4254.txt" href="http://www.ietf.org/rfc/rfc4254.txt" rel="nofollow noopener" target="_blank">There are many others</a>, and there is nothing stopping you from inventing your own type for a custom client/server implementation. Maybe we’ll see a <em class="markup--em markup--p-em">chat</em> channel someday?</p><p class="graf graf--p graf-after--p" id="7074" name="7074">The best part is that you can do all of these things concurrently: Start port forwarding while opening a shell while having some command run in the background.</p><p class="graf graf--p graf-after--p" id="48e5" name="48e5">Once your pipeline is opened, you can send <em class="markup--em markup--p-em">more</em> commands within it. When your client opens a <em class="markup--em markup--p-em">pty-req</em>, it sends event updates such as <em class="markup--em markup--p-em">window-change</em> whenever your terminal size changes.</p><h3 class="graf graf--h3 graf-after--p" id="122f" name="122f">SSH is ubiquitous</h3><p class="graf graf--p graf--startsWithDoubleQuote graf-after--h3" id="ffc4" name="ffc4">“Is it mobile-friendly?” you may joke, but it is! Every platform you can imagine, there is an SSH client available, including iOS, Android, even Windows! OSX and every Linux distro ships with a client. There are even <a class="markup--anchor markup--p-anchor" data-href="https://chrome.google.com/webstore/detail/secure-shell/pnhechapfaindjhompbnflcldabbghjo?hl=en" href="https://chrome.google.com/webstore/detail/secure-shell/pnhechapfaindjhompbnflcldabbghjo?hl=en" rel="nofollow noopener" target="_blank">browser extension SSH clients</a>.</p><p class="graf graf--p graf-after--p" id="83fa" name="83fa">SSH is one of the most accessible secure protocols ever, second only to HTTPS of course.</p><h3 class="graf graf--h3 graf-after--p" id="b990" name="b990">SSH sounds awesome, and familiar…</h3><p class="graf graf--p graf-after--h3" id="87ee" name="87ee">Let’s see what we have so far: Binary protocol, mandatory encryption, key pinning, multiplexing, compression (yes, it does that too).</p><p class="graf graf--p graf-after--p" id="3804" name="3804">Aren’t these the key features for why we invented HTTP/2?</p><p class="graf graf--p graf-after--p" id="f3c0" name="f3c0">Admittedly, SSH is missing some pieces. It’s lacking a notion of virtual hosts, or being able to serve different endpoints on different hostnames from a single IP address.</p><p class="graf graf--p graf-after--p" id="0ceb" name="0ceb">On the other hand, SSH <em class="markup--em markup--p-em">does </em>have several cool features over HTTP/2 though, like built-in client authentication which removes the need for registration and remembering extra passwords.</p><h3 class="graf graf--h3 graf-after--p" id="9c91" name="9c91">More factlets to fill your stockings</h3><ul class="postList"><li class="graf graf--li graf-after--h3" id="63a1" name="63a1">SSH server and client specification is fairly symmetric. Per the protocol, most of what the client can ask of a server, a server <em class="markup--em markup--li-em">could</em> ask of the client. This includes things like run commands, but mainstream clients don’t implement this (as is recommended against in the specification).</li><li class="graf graf--li graf-after--li" id="12d0" name="12d0">Every keystroke is sent over the TCP connection. This is why you might notice lag in your typing.</li><li class="graf graf--li graf-after--li" id="cb28" name="cb28">To see what your OpenSSH client is doing, use -v to enable verbose debugging output. Use another -v to see per-keystroke debugging, and another -v to further increase the silliness.</li><li class="graf graf--li graf-after--li" id="db96" name="db96">There is a protocol called <a class="markup--anchor markup--li-anchor" data-href="https://en.wikipedia.org/wiki/Mosh_%28software%29" href="https://en.wikipedia.org/wiki/Mosh_%28software%29" rel="nofollow noopener" target="_blank">MOSH</a> which uses SSH to bootstrap but uses client-side predictive rendering and a UDP state synchronization protocol to remove the effects of latency. I wish there were more third-party implementations of it.</li><li class="graf graf--li graf-after--li" id="ca43" name="ca43">Since SSH supports port forwarding and a SOCKS proxy interface, you can build a VPN on top of it by using something like <a class="markup--anchor markup--li-anchor" data-href="https://github.com/apenwarr/sshuttle" href="https://github.com/apenwarr/sshuttle" rel="nofollow noopener" target="_blank">sshuttle</a>.</li><li class="graf graf--li graf-after--li" id="d4b0" name="d4b0">SSH can authenticate using a certificate authority scheme, similar to x.509 certificates used in TLS. Also, many clients can verify server fingerprints against an <a class="markup--anchor markup--li-anchor" data-href="https://tools.ietf.org/html/rfc4255" href="https://tools.ietf.org/html/rfc4255" rel="nofollow noopener" target="_blank"><em class="markup--em markup--li-em">SSHFP </em>DNS</a> entry.</li></ul><h3 class="graf graf--h3 graf-after--li" id="5478" name="5478">Some provocative SSH ideas</h3><p class="graf graf--p graf-after--h3" id="5f16" name="5f16">Chat over SSH was fun, but that’s just the tip of what we can come up with.</p><h4 class="graf graf--h4 graf-after--p" id="d107" name="d107"><strong class="markup--strong markup--h4-strong">Multi User Dungeon (MUD)</strong></h4><p class="graf graf--p graf-after--h4" id="a204" name="a204">Someday, you’ll be able to ssh into <em class="markup--em markup--p-em">mud.shazow.net</em> and you’ll get a little ASCII RPG world to explore. Not yet, but it just might happen.</p><h4 class="graf graf--h4 graf-after--p" id="fa39" name="fa39"><strong class="markup--strong markup--h4-strong">Distributed Hash Table (DHT)</strong></h4><p class="graf graf--p graf-after--h4" id="f4c7" name="f4c7">This gets technical but the possibilities are striking… <a class="markup--anchor markup--p-anchor" data-href="https://twitter.com/shazow/status/549348566972370944" href="https://twitter.com/shazow/status/549348566972370944" rel="nofollow noopener" target="_blank">https://twitter.com/shazow/status/549348566972370944</a></p><h4 class="graf graf--h4 graf-after--p" id="010e" name="010e"><strong class="markup--strong markup--h4-strong">Programmatic Data Streams</strong></h4><p class="graf graf--p graf-after--h4" id="c414" name="c414">Or better yet, ZeroMQ-style sockets with proper security and encryption? Check out <a class="markup--anchor markup--p-anchor" data-href="https://github.com/progrium/duplex" href="https://github.com/progrium/duplex" rel="nofollow noopener" target="_blank">Jeff Lindsay’s Duplex</a>. Still a proof of concept, but lots of really cool demos.</p><h4 class="graf graf--h4 graf-after--p" id="2b61" name="2b61"><strong class="markup--strong markup--h4-strong">RPC API</strong></h4><p class="graf graf--p graf-after--h4" id="fbee" name="fbee">SSH’s built-in authentication and encryption makes it <em class="markup--em markup--p-em">really</em> convenient for things like APIs. No complicated OAuth2 handshakes or HMACs and signatures.</p><pre class="graf graf--pre graf-after--p" id="d0a3" name="d0a3">ssh api.example.com multiply a=4 b=5</pre><p class="graf graf--p graf-after--pre" id="ceca" name="ceca">Someday we’ll have good libraries which make connecting over SSH just as easy as HTTP. At that point, your code will look exactly like today’s run-of-the-mill REST API, but use SSH underneath.</p><p class="graf graf--p graf-after--p" id="d2ad" name="d2ad">Either way, the days of <em class="markup--em markup--p-em">curl</em> examples in API docs would be behind us.</p><h4 class="graf graf--h4 graf-after--p" id="ea39" name="ea39"><strong class="markup--strong markup--h4-strong">File Server</strong></h4><p class="graf graf--p graf-after--h4" id="4c7e" name="4c7e">If we have an RPC API, why not serve static files while we’re at it?</p><pre class="graf graf--pre graf-after--p" id="5dd2" name="5dd2">ssh static.example.com get /images/header.png</pre><p class="graf graf--p graf-after--pre" id="d147" name="d147">Remember, SSH supports persistent connections just as well, so your browser could sit there connected to an SSH channel named <em class="markup--em markup--p-em">get</em> for the host and send concurrent <em class="markup--em markup--p-em">get</em> requests for assets. We could even implement ETAGs, and whatever else.</p><h4 class="graf graf--h4 graf-after--p" id="3e0b" name="3e0b"><strong class="markup--strong markup--h4-strong">And finally, HTTP</strong></h4><p class="graf graf--p graf-after--h4" id="6a94" name="6a94">At this point, there’s no reason we couldn’t build a version of HTTP/1 or HTTP/2 on top of SSH. Let’s add a <em class="markup--em markup--p-em">header</em> channel to specify things like <em class="markup--em markup--p-em">Host</em> for virtual host support, throw in some <em class="markup--em markup--p-em">Cookie</em> headers too. Want to add some method verbs? Why not, let’s make a bunch of channels like <em class="markup--em markup--p-em">post</em> or maybe <em class="markup--em markup--p-em">http-post</em> if we want to be polite.</p><h3 class="graf graf--h3 graf-after--p" id="ec7b" name="ec7b">Why aren’t we using SSH for everything?</h3><p class="graf graf--p graf-after--h3 graf--trailing" id="bf3d" name="bf3d">Great question.</p>
<div class="aspectRatioPlaceholder-fill" style="padding-bottom: 35.699999999999996%;"></div><div class="iframeContainer"><iframe allowfullscreen data-media-id="512c7541af6d8de5eb9637c8aebe92dd" frameborder="0" height="250" src="/media/512c7541af6d8de5eb9637c8aebe92dd?postId=9e43586e4ffc" width="700"></iframe></div>

<iframe allowfullscreen data-media-id="512c7541af6d8de5eb9637c8aebe92dd" frameborder="0" height="250" src="/media/512c7541af6d8de5eb9637c8aebe92dd?postId=9e43586e4ffc" width="700"></iframe>
<div class="aspectRatioPlaceholder-fill" style="padding-bottom: 12.6%;"></div><div class="progressiveMedia js-progressiveMedia graf-image" data-action="zoom" data-action-value="1*riKs6PVsoBuW0yO7a5Ojxw.png" data-height="101" data-image-id="1*riKs6PVsoBuW0yO7a5Ojxw.png" data-width="800"><img class="progressiveMedia-thumbnail js-progressiveMedia-thumbnail" crossorigin="anonymous" src="https://cdn-images-1.medium.com/freeze/max/60/1*riKs6PVsoBuW0yO7a5Ojxw.png?q=20"><canvas class="progressiveMedia-canvas js-progressiveMedia-canvas"></canvas><img class="progressiveMedia-image js-progressiveMedia-image" data-src="https://cdn-images-1.medium.com/max/1600/1*riKs6PVsoBuW0yO7a5Ojxw.png"><noscript class="js-progressiveMedia-inner"><img class="progressiveMedia-noscript js-progressiveMedia-inner" src="https://cdn-images-1.medium.com/max/1600/1*riKs6PVsoBuW0yO7a5Ojxw.png"></noscript></div>

<img class="progressiveMedia-thumbnail js-progressiveMedia-thumbnail" crossorigin="anonymous" src="https://cdn-images-1.medium.com/freeze/max/60/1*riKs6PVsoBuW0yO7a5Ojxw.png?q=20"><canvas class="progressiveMedia-canvas js-progressiveMedia-canvas"></canvas><img class="progressiveMedia-image js-progressiveMedia-image" data-src="https://cdn-images-1.medium.com/max/1600/1*riKs6PVsoBuW0yO7a5Ojxw.png"><noscript class="js-progressiveMedia-inner"><img class="progressiveMedia-noscript js-progressiveMedia-inner" src="https://cdn-images-1.medium.com/max/1600/1*riKs6PVsoBuW0yO7a5Ojxw.png"></noscript>
<div class="aspectRatioPlaceholder-fill" style="padding-bottom: 39.1%;"></div><div class="progressiveMedia js-progressiveMedia graf-image" data-action="zoom" data-action-value="1*mva2_6fu-3QfdTDfueclEg.png" data-height="313" data-image-id="1*mva2_6fu-3QfdTDfueclEg.png" data-width="800"><img class="progressiveMedia-thumbnail js-progressiveMedia-thumbnail" crossorigin="anonymous" src="https://cdn-images-1.medium.com/freeze/max/60/1*mva2_6fu-3QfdTDfueclEg.png?q=20"><canvas class="progressiveMedia-canvas js-progressiveMedia-canvas"></canvas><img class="progressiveMedia-image js-progressiveMedia-image" data-src="https://cdn-images-1.medium.com/max/1600/1*mva2_6fu-3QfdTDfueclEg.png"><noscript class="js-progressiveMedia-inner"><img class="progressiveMedia-noscript js-progressiveMedia-inner" src="https://cdn-images-1.medium.com/max/1600/1*mva2_6fu-3QfdTDfueclEg.png"></noscript></div>

<img class="progressiveMedia-thumbnail js-progressiveMedia-thumbnail" crossorigin="anonymous" src="https://cdn-images-1.medium.com/freeze/max/60/1*mva2_6fu-3QfdTDfueclEg.png?q=20"><canvas class="progressiveMedia-canvas js-progressiveMedia-canvas"></canvas><img class="progressiveMedia-image js-progressiveMedia-image" data-src="https://cdn-images-1.medium.com/max/1600/1*mva2_6fu-3QfdTDfueclEg.png"><noscript class="js-progressiveMedia-inner"><img class="progressiveMedia-noscript js-progressiveMedia-inner" src="https://cdn-images-1.medium.com/max/1600/1*mva2_6fu-3QfdTDfueclEg.png"></noscript>
get https://medium.com/@shazow/ssh-how-does-it-even-9e43586e4ffc  ok 
